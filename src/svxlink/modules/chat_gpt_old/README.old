# CMakeLists.txt - Add to src/svxlink/modules/CMakeLists.txt

# Find required packages (add to existing find_package section)
find_package(PkgConfig REQUIRED)
pkg_check_modules(JSONCPP jsoncpp)
find_package(CURL)

# ChatGPT module (add to existing modules section)
if(JSONCPP_FOUND AND CURL_FOUND)
  set(MODULECHATGPT_SOURCES ModuleChatGPT.cpp)
  set(MODULECHATGPT_HEADERS ModuleChatGPT.h)
  add_library(ModuleChatGPT MODULE ${MODULECHATGPT_SOURCES})
  set_target_properties(ModuleChatGPT PROPERTIES PREFIX "")
  target_link_libraries(ModuleChatGPT ${LIBS} ${JSONCPP_LIBRARIES} ${CURL_LIBRARIES})
  if(JSONCPP_INCLUDE_DIRS)
    target_include_directories(ModuleChatGPT PRIVATE ${JSONCPP_INCLUDE_DIRS})
  endif()
  if(CURL_INCLUDE_DIRS)
    target_include_directories(ModuleChatGPT PRIVATE ${CURL_INCLUDE_DIRS})
  endif()
  install(TARGETS ModuleChatGPT DESTINATION ${SVX_MODULE_INSTALL_DIR})
  install(FILES ModuleChatGPT.conf DESTINATION ${SVX_SYSCONF_INSTALL_DIR}/svxlink.d)
else()
  message("-- ChatGPT module will not be built: jsoncpp or curl not found")
endif()

#
# ModuleChatGPT.conf - Configuration file for the ChatGPT module
#

[ModuleChatGPT]

# Module ID - used to activate the module via DTMF
ID=8

# Timeout in seconds for the module to deactivate if no activity
TIMEOUT=60

# Keyword that triggers voice recording (optional - if not set, uses DTMF only)
KEYWORD=chatgpt

# OpenAI API configuration
# You must obtain an API key from OpenAI and set it here
API_KEY=your_openai_api_key_here

# API URLs (optional - defaults shown)
WHISPER_API_URL=https://api.openai.com/v1/audio/transcriptions
CHAT_API_URL=https://api.openai.com/v1/chat/completions

# ChatGPT model to use (optional)
CHAT_MODEL=gpt-3.5-turbo

# Maximum tokens for ChatGPT response (optional)
MAX_TOKENS=150

# Temperature for ChatGPT (0.0 to 2.0, optional)
TEMPERATURE=0.7

# Maximum recording time in seconds
MAX_RECORDING_TIME=30

# Audio format settings
AUDIO_SAMPLE_RATE=16000
AUDIO_CHANNELS=1

# Text-to-speech engine (espeak, festival, or custom command)
TTS_ENGINE=espeak
TTS_SPEED=150
TTS_VOICE=en

# Enable/disable features
ENABLE_KEYWORD_DETECTION=0
ENABLE_VOICE_ACTIVATION=1
ENABLE_TTS_RESPONSE=1

# Audio file paths (optional)
TEMP_AUDIO_DIR=/tmp/svxlink_chatgpt
RECORDING_FORMAT=wav

#
# events.tcl - Event handling script for ChatGPT module
#

# ChatGPT module events
namespace eval ChatGPT {

  # Play module activation sound
  proc module_activated {} {
    playMsg "ChatGPT" "module_activated"
  }

  # Play help message
  proc help {} {
    playMsg "ChatGPT" "help"
    playMsg "Core" "online_help"
  }

  # Play recording started
  proc recording_started {} {
    playMsg "ChatGPT" "recording_started" 
    playSilence 200
  }

  # Play recording stopped
  proc recording_stopped {} {
    playMsg "ChatGPT" "recording_stopped"
    playSilence 200
  }

  # Play processing request
  proc processing_request {} {
    playMsg "ChatGPT" "processing_request"
    playSilence 500
  }

  # Play ready for next
  proc ready_for_next {} {
    playMsg "ChatGPT" "ready_for_next"
    playSilence 200
  }

  # Play error message
  proc error_occurred {} {
    playMsg "ChatGPT" "error_occurred"
    playSilence 200
  }

  # Play timeout message  
  proc operation_timeout {} {
    playMsg "ChatGPT" "operation_timeout"
    playSilence 200
  }
}

#
# README.md - Installation and usage instructions
#

# SVXLink ChatGPT Module

This module allows SVXLink users to interact with OpenAI's ChatGPT via voice. Users can speak questions after activating the module, and receive spoken responses generated by ChatGPT.

## Features

- Voice-to-text using OpenAI Whisper API
- Text processing using ChatGPT API  
- Text-to-speech response playback
- DTMF command interface
- Configurable timeout and audio settings
- Support for multiple TTS engines

## Requirements

### Software Dependencies
- SVXLink development headers
- libsigc++ 2.0
- libjsoncpp
- libcurl
- espeak or festival (for text-to-speech)
- CMake 3.10+

### API Requirements
- OpenAI API key (free tier available)
- Internet connection

## Installation

### 1. Prerequisites

Ensure you have the development dependencies installed:

**Ubuntu/Debian:**
```bash
sudo apt update
sudo apt install libsigc++-2.0-dev libjsoncpp-dev libcurl4-openssl-dev espeak cmake build-essential
```

**CentOS/RHEL/Fedora:**
```bash
sudo dnf install libsigc++20-devel jsoncpp-devel libcurl-devel espeak cmake gcc-c++
# or for older versions:
# sudo yum install libsigc++20-devel jsoncpp-devel libcurl-devel espeak cmake gcc-c++
```

### 2. Get SVXLink Source Code

Clone the SVXLink repository (or use your existing clone):
```bash
git clone https://github.com/sm0svx/svxlink.git
cd svxlink
```

### 3. Add ChatGPT Module to SVXLink

Create the module directory and copy files:
```bash
# Create module directory
mkdir -p src/svxlink/modules/chatgpt
cd src/svxlink/modules/chatgpt

# Copy the module files here:
# - ModuleChatGPT.h
# - ModuleChatGPT.cpp  
# - ModuleChatGPT.conf
```

### 4. Modify SVXLink Build Configuration

Edit `src/svxlink/modules/CMakeLists.txt` and add the ChatGPT module section shown above after the existing modules.

### 5. Build SVXLink with ChatGPT Module

```bash
# Return to SVXLink root directory
cd /path/to/svxlink

# Create build directory
mkdir -p build
cd build

# Configure build (this will check for jsoncpp and curl)
cmake -DCMAKE_INSTALL_PREFIX=/usr/local \
      -DSYSCONF_INSTALL_DIR=/etc \
      -DLOCAL_STATE_DIR=/var \
      ..

# Build everything including the new module
make -j$(nproc)

# Install
sudo make install
sudo ldconfig
```

### 6. Verify Module Installation

Check that the module was built and installed:
```bash
# Check if module file exists
ls -la /usr/local/lib/svxlink/ModuleChatGPT.so

# Check if config file was installed
ls -la /etc/svxlink/svxlink.d/ModuleChatGPT.conf
```

### 5. Create Sound Files

Create the following sound files in `/usr/share/svxlink/sounds/ChatGPT/`:
- `module_activated.raw` - "ChatGPT module activated"
- `help.raw` - "Press 1 to start voice request, # to exit"
- `recording_started.raw` - "Recording started, speak now"
- `recording_stopped.raw` - "Recording stopped"
- `processing_request.raw` - "Processing your request"
- `ready_for_next.raw` - "Ready for next request"
- `error_occurred.raw` - "An error occurred"
- `operation_timeout.raw` - "Operation timed out"

Generate with espeak:
```bash
sudo mkdir -p /usr/share/svxlink/sounds/ChatGPT
cd /usr/share/svxlink/sounds/ChatGPT

# Create sound files using espeak and sox
sudo espeak -w module_activated.wav "ChatGPT module activated"
sudo sox module_activated.wav -r 16000 -c 1 -t raw module_activated.raw
sudo rm module_activated.wav

sudo espeak -w help.wav "Press 1 to start voice request, hash to exit"  
sudo sox help.wav -r 16000 -c 1 -t raw help.raw
sudo rm help.wav

sudo espeak -w recording_started.wav "Recording started, speak now"
sudo sox recording_started.wav -r 16000 -c 1 -t raw recording_started.raw  
sudo rm recording_started.wav

sudo espeak -w recording_stopped.wav "Recording stopped"
sudo sox recording_stopped.wav -r 16000 -c 1 -t raw recording_stopped.raw
sudo rm recording_stopped.wav

sudo espeak -w processing_request.wav "Processing your request"
sudo sox processing_request.wav -r 16000 -c 1 -t raw processing_request.raw
sudo rm processing_request.wav

sudo espeak -w ready_for_next.wav "Ready for next request"  
sudo sox ready_for_next.wav -r 16000 -c 1 -t raw ready_for_next.raw
sudo rm ready_for_next.wav

sudo espeak -w error_occurred.wav "An error occurred"
sudo sox error_occurred.wav -r 16000 -c 1 -t raw error_occurred.raw
sudo rm error_occurred.wav

sudo espeak -w operation_timeout.wav "Operation timed out"
sudo sox operation_timeout.wav -r 16000 -c 1 -t raw operation_timeout.raw
sudo rm operation_timeout.wav
```

### 8. Configuration

1. Get an OpenAI API key from https://platform.openai.com/
2. Edit `/etc/svxlink/svxlink.d/ModuleChatGPT.conf`
3. Set your API key: `API_KEY=your_actual_api_key_here`
4. Add the module to your logic configuration in `/etc/svxlink/svxlink.conf`:

```ini
[SimplexLogic]
MODULES=ModuleHelp,ModuleParrot,ModuleChatGPT
```

### 9. Restart SVXLink
```bash
sudo systemctl restart svxlink
```

## Usage

### DTMF Commands
- **8#** - Activate ChatGPT module
- **0** - Help
- **1** - Start voice recording
- **##** - Stop and exit module

### Voice Interaction
1. Activate module: Press **8#**
2. Start recording: Press **1**
3. Speak your question clearly
4. Release PTT to stop recording
5. Wait for ChatGPT response
6. Repeat or exit with **##**

### Example Session
```
User: 8#
SVXLink: "ChatGPT module activated"
User: 1
SVXLink: "Recording started, speak now"
User: "What is the weather like today?"
SVXLink: "Recording stopped, processing your request"
... (processing delay) ...
SVXLink: "I'm sorry, I don't have access to current weather data..."
SVXLink: "Ready for next request"
```

## Configuration Options

| Setting | Description | Default |
|---------|-------------|---------|
| `ID` | DTMF module ID | 8 |
| `TIMEOUT` | Module timeout (seconds) | 60 |
| `API_KEY` | OpenAI API key | (required) |
| `CHAT_MODEL` | ChatGPT model | gpt-3.5-turbo |
| `MAX_TOKENS` | Response length limit | 150 |
| `TEMPERATURE` | Response creativity (0.0-2.0) | 0.7 |
| `MAX_RECORDING_TIME` | Max recording seconds | 30 |
| `TTS_ENGINE` | Text-to-speech engine | espeak |
| `TTS_SPEED` | Speech speed | 150 |

## Troubleshooting

### Common Issues

1. **Module fails to load**
   - Check that all dependencies are installed
   - Verify module is in correct path: `/usr/local/lib/svxlink/`
   - Check SVXLink logs: `journalctl -u svxlink -f`

2. **API errors**
   - Verify API key is correct and has credits
   - Check internet connectivity
   - Review API rate limits

3. **No audio playback**
   - Check TTS engine installation: `which espeak`
   - Verify sound file permissions
   - Test audio levels

4. **Recording issues**
   - Check microphone levels
   - Verify audio format settings
   - Test with parrot module first

### Debug Mode
Enable debug logging in `/etc/svxlink/svxlink.conf`:
```ini
[GLOBAL]
LOGICS=SimplexLogic:DEBUG
```

### Manual Testing
Test TTS engine:
```bash
espeak "Hello from ChatGPT module"
```

Test API connectivity:
```bash
curl -X POST https://api.openai.com/v1/chat/completions \
  -H "Authorization: Bearer YOUR_API_KEY" \
  -H "Content-Type: application/json" \
  -d '{"model":"gpt-3.5-turbo","messages":[{"role":"user","content":"Hello"}]}'
```

## Free ChatGPT Alternatives

If you prefer not to use OpenAI's paid API, you can modify the module to use free alternatives:

### Local LLM Options
1. **Ollama** - Run models locally
2. **OpenRouter** - Free tier available
3. **Hugging Face Inference API** - Free tier

### Modify for Local LLM
To use Ollama (local LLM), change the API endpoint in configuration:
```ini
CHAT_API_URL=http://localhost:11434/v1/chat/completions
API_KEY=not_required_for_local
```

### Using OpenRouter (Free Tier)
1. Sign up at https://openrouter.ai/
2. Get free API key
3. Configure:
```ini
CHAT_API_URL=https://openrouter.ai/api/v1/chat/completions
API_KEY=your_openrouter_key
CHAT_MODEL=meta-llama/llama-3.2-3b-instruct:free
```

## Advanced Configuration

### Custom TTS Command
For better quality speech, use festival with custom voice:
```ini
TTS_ENGINE=festival
TTS_VOICE=voice_kal_diphone
```

Or use a custom command:
```ini
TTS_ENGINE=custom
TTS_COMMAND=pico2wave -l en-US -w %output% "%text%"
```

### Audio Quality Settings
For better recognition accuracy:
```ini
AUDIO_SAMPLE_RATE=16000
AUDIO_CHANNELS=1
RECORDING_FORMAT=wav
AUDIO_GAIN=1.5
```

### Keyword Detection
Enable voice keyword detection (experimental):
```ini
ENABLE_KEYWORD_DETECTION=1
KEYWORD=computer
KEYWORD_THRESHOLD=0.8
```

## Security Considerations

1. **API Key Protection**: Store API key securely, restrict file permissions
2. **Network Security**: Use HTTPS only, consider VPN for remote access
3. **Content Filtering**: Be aware that conversations are sent to external services
4. **Rate Limiting**: Monitor API usage to prevent overuse

## License

This module is provided under the same license as SVXLink (GPL v2+).

## Contributing

1. Fork the repository
2. Create feature branch
3. Make changes
4. Test thoroughly
5. Submit pull request

## Support

For issues and questions:
1. Check SVXLink documentation
2. Review module logs
3. Test with minimal configuration
4. Report bugs with full logs and configuration

## Version History

- v1.0.0 - Initial release with basic ChatGPT integration
- v1.1.0 - Added multiple TTS engine support
- v1.2.0 - Added free API alternatives support

---

## Technical Notes

### Module Architecture
The module follows SVXLink's standard module interface:
- Inherits from `Module` base class
- Implements required virtual methods
- Uses Async library for audio/network operations
- Event-driven architecture with callbacks

### Audio Pipeline
```
Radio Input -> SVXLink -> Module -> Recorder -> File -> 
OpenAI Whisper -> Text -> ChatGPT -> Response -> TTS -> 
Audio File -> Player -> SVXLink -> Radio Output
```

### API Integration
- Uses libcurl for HTTP requests
- JSON parsing with jsoncpp
- Base64 encoding for audio data
- Async callbacks for non-blocking operation

### Error Handling
- Timeout protection for all operations
- Graceful degradation on API failures
- Audio cleanup on errors
- User feedback for all states

## Future Enhancements

Potential improvements for future versions:
1. Voice activity detection for automatic recording
2. Conversation history/context
3. Multiple language support
4. Integration with local weather/news APIs
5. Custom wake word detection
6. Real-time streaming for faster responses
