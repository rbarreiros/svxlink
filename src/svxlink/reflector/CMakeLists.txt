# Find the popt library
find_package(Popt REQUIRED)
set(LIBS ${LIBS} ${POPT_LIBRARIES})
include_directories(${POPT_INCLUDE_DIRS})
add_definitions(${POPT_DEFINITIONS})

# Find the GCrypt library
#find_package(GCrypt REQUIRED)
#set(LIBS ${LIBS} ${GCRYPT_LIBRARIES})
#include_directories(${GCRYPT_INCLUDE_DIRS})
#add_definitions(${GCRYPT_DEFINITIONS})

# Find jsoncpp library
#find_package(jsoncpp REQUIRED)
#get_target_property(JSONCPP_INC_PATH jsoncpp_lib INTERFACE_INCLUDE_DIRECTORIES)
#include_directories(${JSONCPP_INC_PATH})
#set(LIBS ${LIBS} jsoncpp_lib)
pkg_check_modules (JSONCPP REQUIRED jsoncpp)
include_directories(${JSONCPP_INCLUDE_DIRS})
set(LIBS ${LIBS} ${JSONCPP_LIBRARIES})

# Find Paho MQTT C++ library (optional)
# install libpaho-mqtt-dev and libpaho-mqttpp-dev to compile
# required libpaho-mqtt and libpaho-mqttpp
find_package(PahoMqttCpp QUIET)
if(PahoMqttCpp_FOUND)
  set(LIBS ${LIBS} PahoMqttCpp::paho-mqttpp3)
  add_definitions(-DHAVE_MQTT)
  set(MQTT_SOURCES MqttHandler.cpp)
  message(STATUS "MQTT support enabled")
else()
  set(MQTT_SOURCES "")
  message(STATUS "MQTT support disabled (PahoMqttCpp not found)")
endif()

# Add project libraries
set(LIBS asynccpp asyncaudio asynccore svxmisc ${LIBS})

# Build the executable
add_executable(svxreflector
  svxreflector.cpp Reflector.cpp ReflectorClient.cpp TGHandler.cpp ${MQTT_SOURCES}
)
target_link_libraries(svxreflector ${LIBS})
set_target_properties(svxreflector PROPERTIES
  RUNTIME_OUTPUT_DIRECTORY ${RUNTIME_OUTPUT_DIRECTORY}
)

# Generate config file with correct paths
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/svxreflector.conf.in
  ${CMAKE_CURRENT_BINARY_DIR}/svxreflector.conf
  @ONLY
  )
configure_file(${CMAKE_CURRENT_SOURCE_DIR}/ca-hook.py.in
  ${CMAKE_CURRENT_BINARY_DIR}/ca-hook.py
  @ONLY
  )

# Install targets
install(TARGETS svxreflector DESTINATION ${BIN_INSTALL_DIR})
install_if_not_exists(${CMAKE_CURRENT_BINARY_DIR}/svxreflector.conf
  ${SVX_SYSCONF_INSTALL_DIR}
  )
install_if_not_exists(ca-hook.yaml ${SVX_SYSCONF_INSTALL_DIR})
install(PROGRAMS svxreflector-status
  DESTINATION ${BIN_INSTALL_DIR}
  )
install(PROGRAMS ${CMAKE_CURRENT_BINARY_DIR}/ca-hook.py
  DESTINATION ${SVX_SHARE_INSTALL_DIR}
  )
